<?php

namespace whc\filemanager;

use whc\common\components\Query;
use whc\filemanager\models\File;
use whc\filemanager\models\FileMetadata;
use Yii;
use yii\db\ActiveQuery;
use yii\i18n\PhpMessageSource;

class FileManager extends \yii\base\Widget
{
    public function init()
    {
        if (!isset(Yii::$app->get('i18n')->translations['message*'])) {
            Yii::$app->get('i18n')->translations['message*'] = [
                'class' => PhpMessageSource::className(),
                'basePath' => __DIR__ . '/messages',
                'sourceLanguage' => Yii::$app->language
            ];
        }

        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * upload file
     * @param $files
     * @param $data
     * @return File
     */
    public static function upload($files, $data)
    {
        $files = (array)$files;

        $filePath = Yii::getAlias($data['path']) . '/' . $files['name'];
        if(Yii::$app->fs->write($filePath, file_get_contents($files['tempName'])))
        {
            $fileModel = new File;
            $fileModel->file_name = $files['name'];
            $fileModel->path = $data['path'];
            $fileModel->size = $files['size'];
            $fileModel->mime_type = $files['type'];
            $fileModel->context = isset($data['context'])? $data['context'] : null;
            $fileModel->version = isset($data['version'])? $data['version'] : null;
            $fileModel->hash = sha1(uniqid(rand(), TRUE));
            $fileModel->save();

            if($fileModel->save())
            {
                foreach ((array)$data['metadata'] as $metadata => $value)
                {
                    $fileMetadataModel = new FileMetadata();
                    $fileMetadataModel->file_id = $fileModel->id;
                    $fileMetadataModel->metadata = $metadata;
                    $fileMetadataModel->value = (string)$value;
                    $fileMetadataModel->save();
                }
            }
            else
            {
                unlink($filePath);
                return $fileModel;
            }
        }
    }

    /**
     * get file by hash key
     * @param $hash
     * @return array|\yii\db\ActiveRecord[]
     */
    public static function getByHash($hash)
    {
        return File::find()
            ->alias('f')
            ->innerJoinWith('fileMetadatas')
            ->where(['f.hash' => $hash, 'f.deleted_time' => null])
            ->asArray()
            ->all();
    }

    /**
     * delete a file by hash key
     * @param $hash
     */
    public static function delete($hash)
    {
        $fileModel = File::find()->where(['hash' => $hash, 'deleted_time' => null])->one();
        if($fileModel !== null)
        {
            $currentDate = (new \DateTime())->format('Y-m-d H:i:s');
            $fileModel->deleted_time = $currentDate;
            $fileModel->save();

            $query = new Query();
            $query->createCommand()->update(FileMetadata::tableName(), ['deleted_time' => $currentDate], ['file_id' => $fileModel->id])->execute();
        }
    }
}
